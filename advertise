local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TextChatService = game:GetService("TextChatService")

-- Configuration
local CHAT_MESSAGES = {
    "gg,JkaD9Znt Join For Acc Grinding",
    "accountgrind,vercel,app website"
}
local SCRIPT_URL = "https://raw.githubusercontent.com/SleepingFox189/advertise/refs/heads/main/advertise"
local saveKey = "ServerHopVisited_" .. game.PlaceId
local visitedServers = {}

-- Debugging Function
local function debugPrint(msg)
    print("[DEBUG]: " .. msg)
end

-- Optimized Chat Function
local function SendChatMessage(message)
    task.spawn(function()
        debugPrint("Sending chat message: " .. message)

        -- Method 1: DefaultChatSystemChatEvents
        local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
            pcall(function()
                chatEvent.SayMessageRequest:FireServer(message, "All")
            end)
            return
        end

        -- Method 2: TextChatService
        if TextChatService and TextChatService.TextChannels.RBXGeneral then
            pcall(function()
                TextChatService.TextChannels.RBXGeneral:SendAsync(message)
            end)
            return
        end

        -- Method 3: Virtual Input
        local chatGui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Chat")
        if chatGui then
            local chatBox = chatGui:FindFirstChildWhichIsA("TextBox", true)
            if chatBox then
                pcall(function()
                    chatBox:CaptureFocus()
                    chatBox.Text = message
                    task.wait(0.1)
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end)
            end
        end
    end)
end

-- Send messages instantly
local function SendAllMessages()
    for _, message in ipairs(CHAT_MESSAGES) do
        SendChatMessage(message)
    end
end

-- Server Hopping Functions
local function SaveVisitedServers()
    pcall(function()
        writefile(saveKey .. ".json", HttpService:JSONEncode(visitedServers))
    end)
end

local function LoadVisitedServers()
    local success, data = pcall(function()
        if isfile(saveKey .. ".json") then
            return HttpService:JSONDecode(readfile(saveKey .. ".json"))
        end
        return {}
    end)
    return success and data or {}
end

local function AddCurrentServer()
    if game.JobId and game.JobId ~= "" then
        visitedServers[game.JobId] = os.time()
        SaveVisitedServers()
    end
end

local function GetServers(placeId)
    local API_URL = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(API_URL))
    end)
    return success and result or { data = {} }
end

local function ServerHop()
    local placeId = game.PlaceId
    visitedServers = LoadVisitedServers()
    AddCurrentServer()

    local servers = GetServers(placeId)
    local validServers = {}

    for _, server in ipairs(servers.data) do
        if not visitedServers[server.id] and server.playing < server.maxPlayers and server.id ~= game.JobId then
            table.insert(validServers, server)
        end
    end

    if #validServers > 0 then
        local selectedServer = validServers[math.random(1, #validServers)]
        visitedServers[selectedServer.id] = os.time()
        SaveVisitedServers()

        -- Queue script before teleporting
        if syn and syn.queue_on_teleport then
            syn.queue_on_teleport(game:HttpGet(SCRIPT_URL))
        elseif queue_on_teleport then
            queue_on_teleport(game:HttpGet(SCRIPT_URL))
        end

        TeleportService:TeleportToPlaceInstance(placeId, selectedServer.id, LocalPlayer)
    else
        task.wait(5)
        ServerHop()
    end
end

-- Auto Hop Process (Runs Instantly)
task.spawn(function()
    SendAllMessages()
    task.wait(0.5)
    ServerHop()
end)
