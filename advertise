local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Configuration
local CHAT_MESSAGES = {
    "gg,JkaD9Znt Join For Acc Grinding",
    "accountgrind,vercel,app website"
}
local SCRIPT_URL = "https://raw.githubusercontent.com/SleepingFox189/advertise/refs/heads/main/advertise"
local saveKey = "ServerHopVisited_" .. game.PlaceId
local visitedServers = {}

-- Load and Save Visited Servers
local function SaveVisitedServers()
    pcall(function()
        writefile(saveKey .. ".json", HttpService:JSONEncode(visitedServers))
    end)
end

local function LoadVisitedServers()
    local success, data = pcall(function()
        if isfile(saveKey .. ".json") then
            return HttpService:JSONDecode(readfile(saveKey .. ".json"))
        end
        return {}
    end)
    return success and data or {}
end

local function AddCurrentServer()
    if game.JobId and game.JobId ~= "" then
        visitedServers[game.JobId] = os.time()
        SaveVisitedServers()
    end
end

local function CleanupOldServers()
    local currentTime = os.time()
    for jobId, timestamp in pairs(visitedServers) do
        if currentTime - timestamp > 7200 then -- 2 hours
            visitedServers[jobId] = nil
        end
    end
    SaveVisitedServers()
end

-- Server Hopping Function
local function GetServers(placeId, maxPlayers, cursor)
    local API_URL = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    if cursor then API_URL = API_URL .. "&cursor=" .. cursor end
    
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(API_URL))
    end)
    
    return success and result or {data = {}}
end

local function ServerHop(placeId, maxPlayers)
    placeId = placeId or game.PlaceId
    visitedServers = LoadVisitedServers()
    AddCurrentServer()
    CleanupOldServers()
    
    local foundServer = false
    local cursor = nil
    
    for attempt = 1, 10 do
        local result = GetServers(placeId, maxPlayers, cursor)
        local validServers = {}
        for _, server in ipairs(result.data) do
            if not visitedServers[server.id] and server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(validServers, server)
            end
        end
        
        if #validServers > 0 then
            local selectedServer = validServers[math.random(1, #validServers)]
            visitedServers[selectedServer.id] = os.time()
            SaveVisitedServers()
            
            -- Queue script from external link before teleporting
            if syn and syn.queue_on_teleport then
                syn.queue_on_teleport(game:HttpGet(SCRIPT_URL))
            elseif queue_on_teleport then
                queue_on_teleport(game:HttpGet(SCRIPT_URL))
            end

            TeleportService:TeleportToPlaceInstance(placeId, selectedServer.id, LocalPlayer)
            foundServer = true
            break
        end
        
        if result.nextPageCursor then
            cursor = result.nextPageCursor
        else
            break
        end
        task.wait(1)
    end
    
    if not foundServer then
        task.wait(10)
        ServerHop(placeId, maxPlayers)
    end
end

-- Auto Hop Process
function StartAutoHopProcess()
    task.wait(3)
    ServerHop()
end

-- Initialize
if not game:IsLoaded() then game.Loaded:Wait() end
if not Players.LocalPlayer then Players:GetPropertyChangedSignal("LocalPlayer"):Wait() end
if not Players.LocalPlayer.Character then Players.LocalPlayer.CharacterAdded:Wait() end

task.wait(2)
StartAutoHopProcess()
getgenv().JustTeleported = true
