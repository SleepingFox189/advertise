local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Configuration
local CHAT_MESSAGES = {
    "gg,JkaD9Znt Join For Acc Grinding",
    "accountgrind,vercel,app website"
}
local saveKey = "ServerHopVisited_" .. game.PlaceId
local visitedServers = {}

-- Load and Save Visited Servers
local function SaveVisitedServers()
    pcall(function()
        writefile(saveKey .. ".json", HttpService:JSONEncode(visitedServers))
    end)
end

local function LoadVisitedServers()
    local success, data = pcall(function()
        if isfile(saveKey .. ".json") then
            return HttpService:JSONDecode(readfile(saveKey .. ".json"))
        end
        return {}
    end)
    return success and data or {}
end

local function AddCurrentServer()
    if game.JobId and game.JobId ~= "" then
        visitedServers[game.JobId] = os.time()
        SaveVisitedServers()
    end
end

local function CleanupOldServers()
    local currentTime = os.time()
    for jobId, timestamp in pairs(visitedServers) do
        if currentTime - timestamp > 7200 then -- 2 hours
            visitedServers[jobId] = nil
        end
    end
    SaveVisitedServers()
end

-- Improved Chat Function
local function SendChatMessage(message)
    local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
        local success = pcall(function()
            chatEvent.SayMessageRequest:FireServer(message, "All")
        end)
        if success then return true end
    end
    
    local chatGui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Chat")
    if chatGui then
        local chatBox = chatGui:FindFirstChildWhichIsA("TextBox", true)
        if chatBox then
            local success = pcall(function()
                chatBox:CaptureFocus()
                chatBox.Text = message
                task.wait(0.1)
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
            end)
            if success then return true end
        end
    end
    return false
end

local function SendChatMessages(messages, delay)
    delay = delay or 1.5
    for _, message in ipairs(messages) do
        SendChatMessage(message)
        task.wait(delay)
    end
end

-- Server Hopping Function
local function GetServers(placeId, maxPlayers, cursor)
    local API_URL = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    if cursor then API_URL = API_URL .. "&cursor=" .. cursor end
    
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(API_URL))
    end)
    
    return success and result or {data = {}}
end

local function ServerHop(placeId, maxPlayers)
    placeId = placeId or game.PlaceId
    visitedServers = LoadVisitedServers()
    AddCurrentServer()
    CleanupOldServers()
    
    local foundServer = false
    local cursor = nil
    
    for attempt = 1, 10 do
        local result = GetServers(placeId, maxPlayers, cursor)
        local validServers = {}
        for _, server in ipairs(result.data) do
            if not visitedServers[server.id] and server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(validServers, server)
            end
        end
        
        if #validServers > 0 then
            local selectedServer = validServers[math.random(1, #validServers)]
            visitedServers[selectedServer.id] = os.time()
            SaveVisitedServers()
            
            TeleportService:TeleportToPlaceInstance(placeId, selectedServer.id, LocalPlayer)
            foundServer = true
            break
        end
        
        if result.nextPageCursor then
            cursor = result.nextPageCursor
        else
            break
        end
        task.wait(1)
    end
    
    if not foundServer then
        task.wait(10)
        ServerHop(placeId, maxPlayers)
    end
end

-- Auto Hop Process
function StartAutoHopProcess()
    if not getgenv().JustSentMessage then
        getgenv().JustSentMessage = true
        
        task.wait(3)
        SendChatMessages(CHAT_MESSAGES, 1.5)
        task.wait(5)
        
        ServerHop()
    else
        getgenv().JustSentMessage = false
        ServerHop()
    end
end

-- Initialize
if not game:IsLoaded() then game.Loaded:Wait() end
if not Players.LocalPlayer then Players:GetPropertyChangedSignal("LocalPlayer"):Wait() end
if not Players.LocalPlayer.Character then Players.LocalPlayer.CharacterAdded:Wait() end

task.wait(2)
StartAutoHopProcess()
getgenv().JustTeleported = true
