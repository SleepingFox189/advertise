local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TextChatService = game:GetService("TextChatService")
local MessagingService = game:GetService("MessagingService")

-- Configuration
local CHAT_MESSAGES = {
    "gg,JkaD9Znt Join For Acc Grinding",
    "accountgrind,vercel,app website"
}
local SCRIPT_URL = "https://raw.githubusercontent.com/SleepingFox189/advertise/refs/heads/main/advertise"
local saveKey = "ServerHopVisited_" .. game.PlaceId
local visitedServers = {}

-- Debug function
local function debugPrint(msg)
    print("[DEBUG]: " .. msg)
end

-- Function to send a message in chat
local function sendChatMessage(message)
    local playerChat = TextChatService.Chat.InputObject
    if playerChat then
        local messageObject = Instance.new("TextChatMessage")
        messageObject.Text = message
        playerChat:Send(messageObject)
    else
        debugPrint("Chat service not available!")
    end
end

-- Function to check if the server is full
local function isServerFull(serverInfo)
    local maxPlayers = serverInfo.MaxPlayers
    local currentPlayers = serverInfo.Players
    return currentPlayers >= maxPlayers
end

-- Function to find and join the best server
local function joinBestServer()
    local availableServers = {}  -- List to store available servers that aren't full

    -- Fetch servers data (simulate or get the actual data from some source)
    local serversData = HttpService:GetAsync("API_ENDPOINT_TO_GET_SERVERS") -- Replace with actual data fetching logic
    local servers = HttpService:JSONDecode(serversData)

    -- Filter and sort servers by most players, and excluding full ones
    for _, server in pairs(servers) do
        if not isServerFull(server) then
            table.insert(availableServers, server)
        end
    end

    -- Sort the available servers by most players
    table.sort(availableServers, function(a, b)
        return a.Players > b.Players
    end)

    -- Join the best server (the one with most players, but not full)
    if #availableServers > 0 then
        local bestServer = availableServers[1]
        debugPrint("Joining server with " .. bestServer.Players .. " players.")
        TeleportService:TeleportToPlaceInstance(game.PlaceId, bestServer.InstanceId, LocalPlayer)
    else
        debugPrint("No suitable servers found.")
    end
end

-- Send messages from the list
for _, msg in pairs(CHAT_MESSAGES) do
    sendChatMessage(msg)
end

-- Call the server hopping function
joinBestServer()
