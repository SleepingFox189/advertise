local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Configuration
local CHAT_MESSAGES = {
    "gg, JkaD9Znt Join For Acc Grinding",
    "accountgrind.vercel.app website"
}

local saveKey = "ServerHopVisited_" .. game.PlaceId
local visitedServers = {}

-- Utility Functions
local function SaveVisitedServers()
    local success, errorMessage = pcall(function()
        writefile(saveKey .. ".json", HttpService:JSONEncode(visitedServers))
    end)
    if not success then
        warn("Failed to save visited servers: " .. errorMessage)
    end
end

local function LoadVisitedServers()
    if not isfile(saveKey .. ".json") then
        return {}
    end
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(saveKey .. ".json"))
    end)
    return success and data or {}
end

local function AddCurrentServer()
    if game.JobId ~= "" then
        visitedServers[game.JobId] = os.time()
        SaveVisitedServers()
    end
end

local function CleanupOldServers()
    local currentTime = os.time()
    for jobId, timestamp in pairs(visitedServers) do
        if currentTime - timestamp > 7200 then -- Expire after 2 hours
            visitedServers[jobId] = nil
        end
    end
    SaveVisitedServers()
end

-- Chat Function
local function SendChatMessage(message)
    -- Method 1: Default Chat System
    local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
        local success, err = pcall(function()
            chatEvent.SayMessageRequest:FireServer(message, "All")
        end)
        if success then
            return true
        end
    end
    
    -- Method 2: UI Chat Interaction
    local chatGui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Chat")
    if chatGui then
        local chatBox = chatGui:FindFirstChildWhichIsA("TextBox", true)
        if chatBox then
            local success, err = pcall(function()
                chatBox:CaptureFocus()
                chatBox.Text = message
                task.wait(0.1)
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
            end)
            if success then
                return true
            end
        end
    end

    -- Method 3: Search for remote chat events dynamically
    for _, v in ipairs(ReplicatedStorage:GetDescendants()) do
        if v:IsA("RemoteEvent") and (v.Name:lower():find("chat") or v.Name:lower():find("message")) then
            local success, err = pcall(function()
                v:FireServer(message)
            end)
            if success then
                return true
            end
        end
    end

    -- If all methods fail
    warn("Failed to send chat message: " .. message)
    return false
end

local function SendChatMessages(messages, delay)
    for _, message in ipairs(messages) do
        SendChatMessage(message)
        task.wait(delay or 1.5)
    end
end

-- Server Hopping Functions
local function GetServers(placeId, cursor)
    local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)

    if not success then
        warn("Failed to fetch server data. Check your internet connection or API usage.")
        return {data = {}}
    end

    return result
end

local function ServerHop(placeId)
    placeId = placeId or game.PlaceId
    visitedServers = LoadVisitedServers()
    AddCurrentServer()
    CleanupOldServers()

    local cursor = nil
    local bestServer = nil
    local maxPlayers = Players.MaxPlayers -- Gets the maximum number of players allowed per server

    for _ = 1, 10 do
        local result = GetServers(placeId, cursor)
        for _, server in ipairs(result.data) do
            if not visitedServers[server.id] 
                and server.playing < server.maxPlayers -- Ensure the server isnâ€™t full
                and server.playing > (maxPlayers * 0.75) then -- Prefer servers with more than 75% capacity
                    bestServer = server
                    break
            end
        end

        if bestServer then
            visitedServers[bestServer.id] = os.time()
            SaveVisitedServers()
            TeleportService:TeleportToPlaceInstance(placeId, bestServer.id, LocalPlayer)
            return
        end

        cursor = result.nextPageCursor
        if not cursor then break end
        task.wait(1)
    end

    warn("No suitable servers found. Retrying after 10 seconds...")
    task.wait(10)
    ServerHop(placeId)
end

-- Auto Hop Process
local function StartAutoHopProcess()
    if not getgenv().JustSentMessage then
        getgenv().JustSentMessage = true
        task.wait(3)
        SendChatMessages(CHAT_MESSAGES)
        task.wait(5)
    end
    ServerHop()
end

-- Initialization
if not game:IsLoaded() then
    game.Loaded:Wait()
end

if not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end

task.defer(StartAutoHopProcess)
